// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name MapstedTopBarNotification
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import CoreMotion
import DeveloperToolsSupport
import Foundation
import MapstedAlerts
@_spi(AlertsPrivateApi) @_spi(InternalLocationServices) import MapstedCore
@_spi(LocationShareApi) import MapstedLocationShare
@_exported import MapstedTopBarNotification
import Network
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class MapstedNotificationListenerManager : MapstedTopBarNotification.MapstedNotificationListener {
  public static let shared: MapstedTopBarNotification.MapstedNotificationListenerManager
  public var currentHeightMode: MapstedTopBarNotification.HeightMode
  public func addDelegate(_ delegate: any MapstedTopBarNotification.MapstedNotificationListener)
  public func removeDelegate(_ delegate: any MapstedTopBarNotification.MapstedNotificationListener)
  @objc public func onTopBarNotificationEnabled(enabled: Swift.Bool)
  @objc public func onTopBarNotificationCountUpdated(count: Swift.Int, height: CoreFoundation.CGFloat, heightMode: MapstedTopBarNotification.HeightMode)
  @objc deinit
}
@objc public enum HeightMode : Swift.Int {
  case fullHeight
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class NotificationUIManager {
  public static let shared: MapstedTopBarNotification.NotificationUIManager
  public func getNotificationUIViewController() -> UIKit.UIViewController?
  public func excludeItemFromList(list: [MapstedTopBarNotification.AccuracyItemType] = [])
  @objc deinit
}
public enum AccuracyItemType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case compass
  case wifi
  case bluetooth
  case enableLocation
  case nearyByLocation
  case incorrectFloor
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [MapstedTopBarNotification.AccuracyItemType]
  public typealias RawValue = Swift.Int
  public static var allCases: [MapstedTopBarNotification.AccuracyItemType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MapstedNotificationListener {
  @objc func onTopBarNotificationEnabled(enabled: Swift.Bool)
  @objc func onTopBarNotificationCountUpdated(count: Swift.Int, height: CoreFoundation.CGFloat, heightMode: MapstedTopBarNotification.HeightMode)
}
extension MapstedTopBarNotification.HeightMode : Swift.Equatable {}
extension MapstedTopBarNotification.HeightMode : Swift.Hashable {}
extension MapstedTopBarNotification.HeightMode : Swift.RawRepresentable {}
extension MapstedTopBarNotification.AccuracyItemType : Swift.Equatable {}
extension MapstedTopBarNotification.AccuracyItemType : Swift.Hashable {}
extension MapstedTopBarNotification.AccuracyItemType : Swift.RawRepresentable {}
