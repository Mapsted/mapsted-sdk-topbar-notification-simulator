// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name MapstedTopBarNotification
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreLocation
import CoreMotion
import DeveloperToolsSupport
import Foundation
import MapstedAlerts
import MapstedCore
import MapstedLocationShare
@_exported import MapstedTopBarNotification
import Network
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class MapstedNotificationListenerManager : MapstedTopBarNotification.MapstedNotificationListener {
  public static let shared: MapstedTopBarNotification.MapstedNotificationListenerManager
  public var currentHeightMode: MapstedTopBarNotification.HeightMode
  public func addDelegate(_ delegate: any MapstedTopBarNotification.MapstedNotificationListener)
  public func removeDelegate(_ delegate: any MapstedTopBarNotification.MapstedNotificationListener)
  @objc public func onTopBarNotificationEnabled(enabled: Swift.Bool)
  @objc public func onTopBarNotificationCountUpdated(count: Swift.Int, height: CoreFoundation.CGFloat, heightMode: MapstedTopBarNotification.HeightMode)
  @objc deinit
}
@objc public enum HeightMode : Swift.Int {
  case fullHeight
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class NotificationUIManager {
  public static let shared: MapstedTopBarNotification.NotificationUIManager
  public func getNotificationUIViewController(propertyId: Swift.Int = -1, excludeItems: [MapstedTopBarNotification.AccuracyItemType] = []) -> MapstedTopBarNotification.NotificationUIVC?
  @objc deinit
}
public enum AccuracyItemType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case compass
  case wifi
  case bluetooth
  case enableLocation
  case nearyByLocation
  case incorrectFloor
  case unreliableData
  case missingPermissionsMotionAndFitness
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [MapstedTopBarNotification.AccuracyItemType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [MapstedTopBarNotification.AccuracyItemType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class NotificationUIVC : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func removeAllListeners()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func refreshAndRecalculateNotifications()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension MapstedTopBarNotification.NotificationUIVC : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension MapstedTopBarNotification.NotificationUIVC : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
extension MapstedTopBarNotification.NotificationUIVC : MapstedCore.PropertyAutoDownloadListener, MapstedCore.PropertyDownloadListener {
  @_Concurrency.MainActor @preconcurrency public func onSuccess(propertyId: Swift.Int, buildingId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onFailureWithProperty(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onFailureWithBuilding(propertyId: Swift.Int, buildingId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onSuccess(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func onProgress(propertyId: Swift.Int, percentage: Swift.Float)
}
extension MapstedTopBarNotification.NotificationUIVC : MapstedCore.ValidBlueDotCallbackListener {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onValidBlueDotStateChange(error: MapstedCore.EnumValidBlueDotError)
}
extension MapstedTopBarNotification.NotificationUIVC : MapstedCore.LicenceStatusListener {
  @_Concurrency.MainActor @preconcurrency public func statusChanged(_ to: MapstedCore.MNLicenceStatus)
}
extension MapstedTopBarNotification.NotificationUIVC : MapstedLocationShare.ShareLiveLocationListener {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onShareLiveLocationEnabled(enabled: Swift.Bool)
}
extension MapstedTopBarNotification.NotificationUIVC : MapstedCore.LocationServicesCallback {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onLocationServicesSuccess()
}
@objc public protocol MapstedNotificationListener {
  @objc func onTopBarNotificationEnabled(enabled: Swift.Bool)
  @objc func onTopBarNotificationCountUpdated(count: Swift.Int, height: CoreFoundation.CGFloat, heightMode: MapstedTopBarNotification.HeightMode)
}
extension MapstedTopBarNotification.HeightMode : Swift.Equatable {}
extension MapstedTopBarNotification.HeightMode : Swift.Hashable {}
extension MapstedTopBarNotification.HeightMode : Swift.RawRepresentable {}
extension MapstedTopBarNotification.AccuracyItemType : Swift.Equatable {}
extension MapstedTopBarNotification.AccuracyItemType : Swift.Hashable {}
extension MapstedTopBarNotification.AccuracyItemType : Swift.RawRepresentable {}
